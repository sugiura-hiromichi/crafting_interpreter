/* this is a head comment*/
print "hello world";
var a=0;
var b=true;
var c ="hello";
var d;
assert !d;// assert evaluate only `false` and `nil` as falsy value

var e=1;
var f=2;
assert e+f==3;
assert e-f==-1;
assert e*f==2;
assert e/f==0.5;
assert e%2==1;
assert e<f;
assert e<=f;
assert f>e;
assert f>=e;
assert (e+f)/2==1.5;

var g=1.0;
assert -g==-1.0;

assert true and false or true;

e

if true {
} else {
	assert false;
}

while (a<9) {
	a=a+1;
}

for (;e<9;e=e+1) {}

assert a==e;

fun add(a,b) {
	return a+b;
}

fun black_box(a){
	return a;
}

var h=add;
print black_box(h)(1,2)==3;

fun return_nil(){}
assert !return_nil();

fun returnFunction() {
	var outside = "outside";

	fun inner() {
		print outside;
	}

	return inner;
}

var fn = returnFunction();
fn();

class Breakfast {
	init(meat, bread) {
		this.meat = meat;
		this.bread = bread;
	}

	cook() {
		print "Eggs a-fryin'!";
	}

	serve(who) {
		print "Enjoy your " + this.meat + " and " + this.bread + ", " + who + ".";
	}
}

// Store it in variables.
var someVariable = Breakfast;

// Pass it to functions.
someFunction(Breakfast);

var breakfast = Breakfast();
print breakfast; // "Breakfast instance".

breakfast.meat = "sausage";
breakfast.bread = "sourdough";

var baconAndToast = Breakfast("bacon", "toast");
baconAndToast.serve("Dear Reader");

class Brunch < Breakfast {
	init(meat, bread, drink) {
		super.init(meat, bread);
		this.drink = drink;
	}

	drink() {
		print "How about a Bloody Mary?";
	}
}

var benedict = Brunch("ham", "English muffin");
benedict.serve("Noble Reader");
/* this
/*is
	/*block comment*/ allowing*/ /* nested comment */ */
// this is line comment
